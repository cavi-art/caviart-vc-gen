(verification-unit "QSORT"
		   :sources (((:lang :clir)
			      (:module :self)))
		   :uses (:ir :ir.int :ir.array :lemmas.arrays :ir.array.immutable)
		   :documentation "This is the quicksort function on the CLIR.")

(define loopF
    ((v (array int)) (i int) (j int) (piv int) (pos_piv int) (v0 (array int) :ghost) (i0 int :ghost))
    ((vres (array int)) (pos_piv1 int))
  (declare (assertion
            (precd (and
                    (@ permut_sub v v0 i0 (@ + j (the int 1)))
                    (and (@ < 0 i)
                         (@ <= i (@ length v)))
                    (and (@ <= 0 j)
                         (@ < j (@ length v)))
                    (@ <= i (@ + j (the int 1)))
                    (@ <= (@ get v pos_piv) piv)
                    (forall ((k int))
                            (-> (@ < pos_piv k i)
                                (@ > (@ get v k)
                                     piv)))
                    (and (@ < 0 i0)
                         (@ <= i0 i))
                    (@ <= (@ - i0 (the int 1))
                          pos_piv)))
                   
            (postcd (and
                     (@ <= pos_piv pos_piv1)
                     (@ <= pos_piv1 j)
                     (forall ((k int))
                             (-> (@ <= pos_piv k pos_piv1)
                                 (@ <= (@ get vres k) piv)))
                     (forall ((k int))
                             (-> (and (@ < pos_piv1 k)
                                      (@ <= k j))
                                 (@ > (@ get vres k) piv)))
                     (forall ((k int))
                             (-> (and (@ <= (the int 0) k)
                                      (@ < k pos_piv))
                                 (@ = (@ get vres k) (@ get v k))))
                     (forall ((k int))
                             (-> (@ < j k (@ length v))
                                 (@ = (@ get vres k) (@ get v k))))
                     (@ permut_sub vres v0 i0 (@ + j 1))))
            (variant (@ + (@ - j i)
                          (the int 1)))))
  (let ((b bool)) (@ <= i j)
    (case b
      ((the bool true)
       (let ((vi int)) (@ get v i)
         (let ((b1 bool)) (@ <= vi piv)
           (case b1
             ((the bool true)
              (let ((pos_piv1 int)) (@ + pos_piv (the int 1))
                (let ((v1 (array int))) (@ swap v i pos_piv1)
                  (let ((i1 int)) (@ + i 1)
                    (@ loopF v1 i1 j piv pos_piv1 v0 i0)))))
             ((the bool false)
              (let ((i1 int)) (@ + i 1)
                (@ loopF v i1 j piv pos_piv v0 i0)))))))
      ((the bool false)
       (let ((v1 (array int))) (@ arrCopy v)
         (tuple v1 pos_piv))))))


(define partition
    ((v (array int)) (i int) (j int))
    ((vres (array int)) (pos_piv int))
  (declare (assertion
            (precd (and
                    (@ <= (the int 0) i)
                    (@ < i j (@ length v))))
            (postcd (and (@ <= i pos_piv j)
                         (@ permut_sub vres v i (@ + j (the int 1)))
                         (forall ((k int))
                                 (-> (@ <= i k pos_piv)
                                     (@ <= (@ get vres k)
                                           (@ get vres pos_piv))))
                         (forall ((r int))
                                 (-> (and (@ < pos_piv r)
                                          (@ <= r j))
                                     (@ > (@ get vres r)
                                          (@ get vres pos_piv))))))))

  (let ((piv int)) (@ get v i)
    (let ((pos_piv int)) i
      (let ((i1 int)) (@ + i (the int 1))
        (let ((v1 (array int)) (pos_piv1 int)) (@ loopF v i1 j piv pos_piv v i1)
          (let ((v2 (array int))) (@ swap v1 i pos_piv1)
            (tuple v2 pos_piv1)))))))


(define quicksort ((v (array int)) (n int)) ((vres (array int)))
  (declare
   (assertion
    (precd (and (@ < (the int 0) (@ length v))
                (@ = n (@ length v))))
    (postcd (and (@ sorted vres)
		 (@ permut_all v vres)))))
  (letfun
      ((qsort ((v (array int)) (i int) (j int)) ((vsort (array int)))
	 (declare
	  (assertion
	   (precd (and (@ <= (the int 0) i (@ length v))
                       (and (@ <= (the int -1) j)
                            (@ < j (@ length v)))))
	   (postcd (and (@ sorted_sub vsort i (@ + j (the int 1)))
			(@ permut_sub v vsort i (@ + j (the int 1)))))))
	 (let ((b bool)) (@ < i j)
           (case b
             ((the bool true) (@ f1 v i j))
             ((the bool false) v))))
       (f1 ((v (array int)) (i int) (j int)) ((result (array int)))
	 (let ((v1 (array int)) (p int)) (@ partition v i j)
           (let ((p1 int)) (@ - p (the int 1))
             (let ((v2 (array int))) (@ qsort v1 i p1)
               (let ((p2 int)) (@ + p (the int 1))
                 (let ((v3 (array int))) (@ f2 v2 p2 j p i v1)
                   v3))))))
       (f2 ((v2 (array int)) (p2 int) (j int) (p int :ghost) (i int :ghost) (v1 (array int) :ghost)) ((v3 (array int)))
         (declare
          (assertion
           (precd (and (@ <= (the int 0) i (@ length v2))
                       (and (@ <= (the int -1) j)
                            (@ < j (@ length v2)))))
           (postcd (and (@ sorted_sub v3 i (@ + j (the int 1)))
			(@ permut_sub v3 v2 i (@ + j (the int 1)))
                        (forall ((k int) (l int))
                                (-> (@ <= i k p l j)
                                    (@ <= (@ get v3 k)
                                          (@ get v3 p)
                                          (@ get v3 l))))
                        (@ permut_sub v2 v1 i (@ + j (the int 1)))
                        (@ permut_sub v3 v1 i (@ + j (the int 1)))))))
         (@ qsort v2 p2 j)))
    (let ((n1 int)) (@ - n (the int 1))
      (@ qsort v (the int 0) n1))))


;; Local Variables:
;; mode: common-lisp
;; coding: utf-8
;; slime-buffer-package: "ir.vc.core"
;; End:
